/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.UsuarioController;
import dao.exceptions.NonexistentEntityException;
import java.awt.Color;
import java.awt.Rectangle;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.Operador;
import model.Persona;
import model.Usuario;
import view.resources.TablaEmpleadoUsuarioModelListener;
import view.resources.TablaOperadorModelo;
import view.resources.TablaPersonaModelListener;
import view.resources.TablaPersonaModelo;
import view.resources.TablaPersonaUsuarioModelListener;
import view.resources.TablaUsuarioModelListener;
import view.resources.TablaUsuarioModelo;

/**
 *
 * @author Ariel
 */
public class PanelUsuario extends javax.swing.JPanel implements InterfacePanel {

    private final ValidadorDeCampos validador;

    //variables de tabla
    private final TablaUsuarioModelo tablaUsuarioModelo;

    private final TablaPersonaModelo tablaPersonaModelo;

    private final TablaOperadorModelo tablaOperadorModelo;

    private final UsuarioController controlador;
    private Usuario usuarioSeleccionado;

    private final List<Usuario> usuarios;

    private String crud;

    /**
     * Creates new form PanelPersona
     */
    public PanelUsuario() {
        //JTable vacio
        this.tablaUsuarioModelo = new TablaUsuarioModelo();

        this.tablaPersonaModelo = new TablaPersonaModelo();

        this.tablaOperadorModelo = new TablaOperadorModelo();

        this.validador = new ValidadorDeCampos();

        this.crud = "";

        this.usuarios = new ArrayList<>();
        initComponents();
        habilitarTodosLosBotones(false);
        this.validador.habilitarBoton(true, this.jbtn_volver, Color.red, Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(false, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);

        //iniciar el controlador de esta vista
        this.controlador = new UsuarioController();
        setSize(800, 600);

        //agrega escuchadores de las tablas
        this.jtb_usuario.getSelectionModel().addListSelectionListener(new TablaUsuarioModelListener(this));

        this.jtb_empleadoAsociado.getSelectionModel().addListSelectionListener(new TablaEmpleadoUsuarioModelListener(this));

        this.jtb_personaAsociada.getSelectionModel().addListSelectionListener(new TablaPersonaUsuarioModelListener(this));

        limpiarTodosLosCampos();

        this.validador.LimitarCaracteres(this.jtf_nickname, 30);
        this.validador.LimitarCaracteres(this.jtf_buscarUsuario, 30);

        this.habilitarTodosLosCampos(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_crud = new javax.swing.JPanel();
        jScrollPaneTabla = new javax.swing.JScrollPane();
        jtb_usuario = new javax.swing.JTable();
        jbtn_listar = new javax.swing.JButton();
        jbtn_agregar = new javax.swing.JButton();
        jtf_buscarUsuario = new javax.swing.JTextField();
        jTabbedPaneContenedor = new javax.swing.JTabbedPane();
        jPanel_datos = new javax.swing.JPanel();
        jbtn_eliminar = new javax.swing.JButton();
        jbtn_cancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jtf_nickname = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jbtn_modificar = new javax.swing.JButton();
        jbtn_aceptar = new javax.swing.JButton();
        jlbl_mensaje = new javax.swing.JLabel();
        jlbl_alertaConfirmarPassword = new javax.swing.JLabel();
        jlbl_alertaNickName = new javax.swing.JLabel();
        jlbl_alertaPassword = new javax.swing.JLabel();
        jlbl_alertaPersonaAsociada = new javax.swing.JLabel();
        jtf_personaAsociada = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jtf_empleadoAsociado = new javax.swing.JTextField();
        jpf_confirmarPassword = new javax.swing.JPasswordField();
        jpf_password = new javax.swing.JPasswordField();
        jlbl_alertaEmpleadoAsociado = new javax.swing.JLabel();
        jPanelPersonaAsociada = new javax.swing.JPanel();
        jScrollPanePersonaAsociada = new javax.swing.JScrollPane();
        jtb_personaAsociada = new javax.swing.JTable();
        jbtn_listarPersona = new javax.swing.JButton();
        jbtn_asignarPersona = new javax.swing.JButton();
        jbtn_volverADatosDeUsuarioPersona = new javax.swing.JButton();
        jbtn_desasignarPersona = new javax.swing.JButton();
        jtf_buscarPersona = new javax.swing.JTextField();
        jPanelEmpleadoAsociado = new javax.swing.JPanel();
        jScrollPaneEmpleadoAsociado = new javax.swing.JScrollPane();
        jtb_empleadoAsociado = new javax.swing.JTable();
        jbtn_listarEmpleado = new javax.swing.JButton();
        jtf_buscarEmpleado = new javax.swing.JTextField();
        jbtn_asignarEmpleado = new javax.swing.JButton();
        jbtn_desasignarEmpleado = new javax.swing.JButton();
        jbtn_volverADatosDeUsuarioEmpleado = new javax.swing.JButton();
        jbtn_volver = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(950, 750));
        setMinimumSize(new java.awt.Dimension(950, 750));
        setPreferredSize(new java.awt.Dimension(950, 750));

        jScrollPaneTabla.setMaximumSize(new java.awt.Dimension(950, 750));
        jScrollPaneTabla.setMinimumSize(new java.awt.Dimension(950, 750));
        jScrollPaneTabla.setPreferredSize(new java.awt.Dimension(950, 750));

        jtb_usuario.setModel(tablaUsuarioModelo);
        jScrollPaneTabla.setViewportView(jtb_usuario);

        jbtn_listar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbtn_listar.setText("LISTAR POR NICKNAME");
        jbtn_listar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_listarActionPerformed(evt);
            }
        });

        jbtn_agregar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbtn_agregar.setText("AGREGAR");
        jbtn_agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_agregarActionPerformed(evt);
            }
        });

        jtf_buscarUsuario.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtf_buscarUsuario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtf_buscarUsuarioFocusGained(evt);
            }
        });
        jtf_buscarUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_buscarUsuarioKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel_crudLayout = new javax.swing.GroupLayout(jPanel_crud);
        jPanel_crud.setLayout(jPanel_crudLayout);
        jPanel_crudLayout.setHorizontalGroup(
            jPanel_crudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_crudLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel_crudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 910, Short.MAX_VALUE)
                    .addGroup(jPanel_crudLayout.createSequentialGroup()
                        .addComponent(jbtn_listar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jtf_buscarUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbtn_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel_crudLayout.setVerticalGroup(
            jPanel_crudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_crudLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPaneTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 231, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel_crudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtn_listar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel_crudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtf_buscarUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbtn_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jTabbedPaneContenedor.setEnabled(false);

        jPanel_datos.setEnabled(false);

        jbtn_eliminar.setText("ELIMINAR");
        jbtn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_eliminarActionPerformed(evt);
            }
        });

        jbtn_cancelar.setText("CANCELAR");
        jbtn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_cancelarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("NICKNAME");

        jtf_nickname.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtf_nickname.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("PASSWORD");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("DNI PERSONA ASOCIADA");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("CONFIRMAR PASSWORD");

        jbtn_modificar.setText("MODIFICAR");
        jbtn_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_modificarActionPerformed(evt);
            }
        });

        jbtn_aceptar.setText("ACEPTAR");
        jbtn_aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_aceptarActionPerformed(evt);
            }
        });

        jlbl_mensaje.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlbl_mensaje.setForeground(new java.awt.Color(255, 0, 0));

        jlbl_alertaConfirmarPassword.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jlbl_alertaNickName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jlbl_alertaPassword.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jlbl_alertaPersonaAsociada.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jtf_personaAsociada.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtf_personaAsociada.setEnabled(false);
        jtf_personaAsociada.setFocusable(false);
        jtf_personaAsociada.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtf_personaAsociadaMousePressed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("DNI EMPLEADO ASOCIADO");

        jtf_empleadoAsociado.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtf_empleadoAsociado.setEnabled(false);
        jtf_empleadoAsociado.setFocusable(false);
        jtf_empleadoAsociado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtf_empleadoAsociadoMousePressed(evt);
            }
        });

        jpf_confirmarPassword.setEnabled(false);

        jpf_password.setEnabled(false);

        jlbl_alertaEmpleadoAsociado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel_datosLayout = new javax.swing.GroupLayout(jPanel_datos);
        jPanel_datos.setLayout(jPanel_datosLayout);
        jPanel_datosLayout.setHorizontalGroup(
            jPanel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_datosLayout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addGroup(jPanel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_datosLayout.createSequentialGroup()
                        .addGap(218, 218, 218)
                        .addComponent(jbtn_aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbtn_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbtn_modificar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbtn_eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(133, Short.MAX_VALUE))
                    .addGroup(jPanel_datosLayout.createSequentialGroup()
                        .addGroup(jPanel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jlbl_mensaje, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel_datosLayout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jpf_password))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel_datosLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jtf_personaAsociada))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel_datosLayout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jpf_confirmarPassword))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel_datosLayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jtf_nickname, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel_datosLayout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jtf_empleadoAsociado)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlbl_alertaPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlbl_alertaConfirmarPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlbl_alertaPersonaAsociada, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlbl_alertaEmpleadoAsociado, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlbl_alertaNickName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel_datosLayout.setVerticalGroup(
            jPanel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_datosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf_nickname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbl_alertaNickName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jpf_password, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jlbl_alertaPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jpf_confirmarPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbl_alertaConfirmarPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf_personaAsociada, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbl_alertaPersonaAsociada, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlbl_alertaEmpleadoAsociado, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf_empleadoAsociado, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jlbl_mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_datosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtn_modificar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtn_eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtn_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtn_aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPaneContenedor.addTab("Datos de Usuario", jPanel_datos);

        jPanelPersonaAsociada.setEnabled(false);

        jtb_personaAsociada.setModel(tablaPersonaModelo);
        jScrollPanePersonaAsociada.setViewportView(jtb_personaAsociada);

        jbtn_listarPersona.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbtn_listarPersona.setText("LISTAR");
        jbtn_listarPersona.setEnabled(false);
        jbtn_listarPersona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_listarPersonaActionPerformed(evt);
            }
        });

        jbtn_asignarPersona.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbtn_asignarPersona.setText("ASIGNAR");
        jbtn_asignarPersona.setEnabled(false);
        jbtn_asignarPersona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_asignarPersonaActionPerformed(evt);
            }
        });

        jbtn_volverADatosDeUsuarioPersona.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbtn_volverADatosDeUsuarioPersona.setText("VOLVER A DATOS DE USUARIO");
        jbtn_volverADatosDeUsuarioPersona.setEnabled(false);
        jbtn_volverADatosDeUsuarioPersona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_volverADatosDeUsuarioPersonaActionPerformed(evt);
            }
        });

        jbtn_desasignarPersona.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbtn_desasignarPersona.setText("DESASIGNAR");
        jbtn_desasignarPersona.setEnabled(false);
        jbtn_desasignarPersona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_desasignarPersonaActionPerformed(evt);
            }
        });

        jtf_buscarPersona.setEnabled(false);
        jtf_buscarPersona.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtf_buscarPersonaFocusGained(evt);
            }
        });
        jtf_buscarPersona.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_buscarPersonaKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanelPersonaAsociadaLayout = new javax.swing.GroupLayout(jPanelPersonaAsociada);
        jPanelPersonaAsociada.setLayout(jPanelPersonaAsociadaLayout);
        jPanelPersonaAsociadaLayout.setHorizontalGroup(
            jPanelPersonaAsociadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPersonaAsociadaLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanelPersonaAsociadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPersonaAsociadaLayout.createSequentialGroup()
                        .addComponent(jbtn_listarPersona, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jtf_buscarPersona, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jbtn_asignarPersona, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jbtn_desasignarPersona, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPersonaAsociadaLayout.createSequentialGroup()
                        .addComponent(jScrollPanePersonaAsociada, javax.swing.GroupLayout.DEFAULT_SIZE, 905, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPersonaAsociadaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbtn_volverADatosDeUsuarioPersona, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelPersonaAsociadaLayout.setVerticalGroup(
            jPanelPersonaAsociadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPersonaAsociadaLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPanePersonaAsociada, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanelPersonaAsociadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtn_listarPersona, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf_buscarPersona, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtn_asignarPersona, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtn_desasignarPersona, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jbtn_volverADatosDeUsuarioPersona, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPaneContenedor.addTab("Persona Asociada", jPanelPersonaAsociada);

        jPanelEmpleadoAsociado.setEnabled(false);

        jtb_empleadoAsociado.setModel(tablaOperadorModelo);
        jScrollPaneEmpleadoAsociado.setViewportView(jtb_empleadoAsociado);

        jbtn_listarEmpleado.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbtn_listarEmpleado.setText("LISTAR");
        jbtn_listarEmpleado.setEnabled(false);
        jbtn_listarEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_listarEmpleadoActionPerformed(evt);
            }
        });

        jtf_buscarEmpleado.setEnabled(false);
        jtf_buscarEmpleado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtf_buscarEmpleadoFocusGained(evt);
            }
        });
        jtf_buscarEmpleado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_buscarEmpleadoKeyReleased(evt);
            }
        });

        jbtn_asignarEmpleado.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbtn_asignarEmpleado.setText("ASIGNAR");
        jbtn_asignarEmpleado.setEnabled(false);
        jbtn_asignarEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_asignarEmpleadoActionPerformed(evt);
            }
        });

        jbtn_desasignarEmpleado.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbtn_desasignarEmpleado.setText("DESASIGNAR");
        jbtn_desasignarEmpleado.setEnabled(false);
        jbtn_desasignarEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_desasignarEmpleadoActionPerformed(evt);
            }
        });

        jbtn_volverADatosDeUsuarioEmpleado.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbtn_volverADatosDeUsuarioEmpleado.setText("VOLVER A DATOS DE USUARIO");
        jbtn_volverADatosDeUsuarioEmpleado.setEnabled(false);
        jbtn_volverADatosDeUsuarioEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_volverADatosDeUsuarioEmpleadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelEmpleadoAsociadoLayout = new javax.swing.GroupLayout(jPanelEmpleadoAsociado);
        jPanelEmpleadoAsociado.setLayout(jPanelEmpleadoAsociadoLayout);
        jPanelEmpleadoAsociadoLayout.setHorizontalGroup(
            jPanelEmpleadoAsociadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEmpleadoAsociadoLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanelEmpleadoAsociadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelEmpleadoAsociadoLayout.createSequentialGroup()
                        .addComponent(jbtn_listarEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jtf_buscarEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jbtn_asignarEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jbtn_desasignarEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelEmpleadoAsociadoLayout.createSequentialGroup()
                        .addGroup(jPanelEmpleadoAsociadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbtn_volverADatosDeUsuarioEmpleado, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPaneEmpleadoAsociado, javax.swing.GroupLayout.DEFAULT_SIZE, 905, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanelEmpleadoAsociadoLayout.setVerticalGroup(
            jPanelEmpleadoAsociadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEmpleadoAsociadoLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPaneEmpleadoAsociado, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanelEmpleadoAsociadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtn_listarEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf_buscarEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtn_asignarEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtn_desasignarEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jbtn_volverADatosDeUsuarioEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPaneContenedor.addTab("Empleado Asociado", jPanelEmpleadoAsociado);

        jbtn_volver.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jbtn_volver.setText("VOLVER");
        jbtn_volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_volverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtn_volver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel_crud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTabbedPaneContenedor, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel_crud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPaneContenedor, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbtn_volver, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Controla el boton volver
     *
     * @param evt
     */
    private void jbtn_volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_volverActionPerformed
        //Inhabilita Botones
        habilitarTodosLosBotones(false);

        //limpia todos los campos
        limpiarTodosLosCampos();

        //Habilita el Arbol de seleccion        
        JFramePrincipal.getArbolModulos().setEnabled(true);
        JFramePrincipal.getjPanelContenido().removeAll();
        JFramePrincipal.getjPanelContenido().repaint();
    }//GEN-LAST:event_jbtn_volverActionPerformed

    /**
     * Controla el boton cancelar
     *
     * @param evt
     */
    private void jbtn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_cancelarActionPerformed
        //Actualizar el TableModel con la lista del controlador
        this.tablaUsuarioModelo.setUsuarios(this.controlador.buscarTodosLosUsuarios());

        //Refrescar el modelo en la tabla
        this.tablaUsuarioModelo.fireTableDataChanged();

        limpiarTodosLosCampos();
        habilitarTodosLosCampos(false);
        habilitarTodosLosBotones(false);

        this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarCampo(true, this.jtf_buscarUsuario);

        this.usuarioSeleccionado = null;

        this.jtb_usuario.setEnabled(true);

        this.jlbl_alertaNickName.setIcon(null);
        this.jlbl_alertaPassword.setIcon(null);
        this.jlbl_alertaConfirmarPassword.setIcon(null);
        this.jlbl_alertaPersonaAsociada.setIcon(null);
        this.jlbl_alertaEmpleadoAsociado.setIcon(null);

        this.jlbl_mensaje.setText("");
        this.crud = "buscar";
    }//GEN-LAST:event_jbtn_cancelarActionPerformed

    /**
     * Controla el boton modificar
     *
     * @param evt
     */
    private void jbtn_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_modificarActionPerformed
        this.crud = "modificar";
        habilitarTodosLosBotones(false);
        habilitarTodosLosCampos(true);
        this.validador.habilitarBoton(false, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_aceptar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_cancelar, Color.red, Color.WHITE, null, null);
        this.validador.habilitarBoton(false, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarCampo(false, this.jtf_buscarUsuario);

        this.jtb_usuario.setEnabled(false);

        this.jTabbedPaneContenedor.setSelectedIndex(0);
        this.jbtn_volverADatosDeUsuarioPersona.setEnabled(false);
        this.jbtn_volverADatosDeUsuarioPersona.setEnabled(false);


    }//GEN-LAST:event_jbtn_modificarActionPerformed

    /**
     * Controla el boton aceptar si se presiono el boton agregar, llama a la
     * función agregar si se presiono el boton modificar, llama a la función
     * modificar si se presiono el boton eliminar, llama a la función eliminar
     *
     * @param evt
     */
    private void jbtn_aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_aceptarActionPerformed
        int opcion = 0;
        if (crud.equals("agregar")) {
            opcion = JOptionPane.showConfirmDialog(null, "Realmente desea Agregar la persona", "Confirmar Creación", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (opcion == 0) {
                agregar();
            } else {
                //Actualizar el TableModel con la lista del controlador
                this.tablaUsuarioModelo.setUsuarios(this.controlador.buscarTodosLosUsuarios());

                //Refrescar el modelo en la tabla
                this.tablaUsuarioModelo.fireTableDataChanged();

                limpiarTodosLosCampos();
                habilitarTodosLosCampos(false);
                habilitarTodosLosBotones(false);

                this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarCampo(true, this.jtf_buscarUsuario);

                this.usuarioSeleccionado = null;

                this.jtb_usuario.setEnabled(true);

                this.jlbl_alertaNickName.setIcon(null);
                this.jlbl_alertaPassword.setIcon(null);
                this.jlbl_alertaConfirmarPassword.setIcon(null);
                this.jlbl_alertaPersonaAsociada.setIcon(null);
                this.jlbl_alertaEmpleadoAsociado.setIcon(null);

                this.jlbl_mensaje.setText("");
            }
        }

        if (crud.equals("modificar")) {
            opcion = JOptionPane.showConfirmDialog(null, "Realmente desea Modificar la persona", "Confirmar Modificación", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (opcion == 0) {
                try {
                    modificar();
                } catch (Exception ex) {
                    Logger.getLogger(PanelUsuario.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                //Actualizar el TableModel con la lista del controlador
                this.tablaUsuarioModelo.setUsuarios(this.controlador.buscarTodosLosUsuarios());

                //Refrescar el modelo en la tabla
                this.tablaUsuarioModelo.fireTableDataChanged();

                limpiarTodosLosCampos();
                habilitarTodosLosCampos(false);
                habilitarTodosLosBotones(false);

                this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarCampo(true, this.jtf_buscarUsuario);

                this.usuarioSeleccionado = null;

                this.jtb_usuario.setEnabled(true);

                this.jlbl_alertaNickName.setIcon(null);
                this.jlbl_alertaPassword.setIcon(null);
                this.jlbl_alertaConfirmarPassword.setIcon(null);
                this.jlbl_alertaPersonaAsociada.setIcon(null);
                this.jlbl_alertaEmpleadoAsociado.setIcon(null);

                this.jlbl_mensaje.setText("");
            }
        }
        if (crud.equals("eliminar")) {
            opcion = JOptionPane.showConfirmDialog(null, "Realmente desea eliminar la persona", "Confirmar Eliminación", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (opcion == 0) {
                try {
                    eliminar();
                    opcion = JOptionPane.showConfirmDialog(null, "La eliminación se realizo con exito", "Persona Eliminada", JOptionPane.CLOSED_OPTION, JOptionPane.QUESTION_MESSAGE);
                } catch (NonexistentEntityException ex) {
                    Logger.getLogger(PanelUsuario.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(PanelUsuario.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.crud = "buscar";
            } else {
                //Actualizar el TableModel con la lista del controlador
                this.tablaUsuarioModelo.setUsuarios(this.controlador.buscarTodosLosUsuarios());

                //Refrescar el modelo en la tabla
                this.tablaUsuarioModelo.fireTableDataChanged();

                limpiarTodosLosCampos();
                habilitarTodosLosCampos(false);
                habilitarTodosLosBotones(false);

                this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarCampo(true, this.jtf_buscarUsuario);

                this.usuarioSeleccionado = null;

                this.jtb_usuario.setEnabled(true);

                this.jlbl_alertaNickName.setIcon(null);
                this.jlbl_alertaPassword.setIcon(null);
                this.jlbl_alertaConfirmarPassword.setIcon(null);
                this.jlbl_alertaPersonaAsociada.setIcon(null);
                this.jlbl_alertaEmpleadoAsociado.setIcon(null);

                this.jlbl_mensaje.setText("");
            }
        }


    }//GEN-LAST:event_jbtn_aceptarActionPerformed

    /**
     * Controla el boton Listar
     *
     * @param evt
     */
    private void jbtn_listarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_listarActionPerformed
        //Actualizar el TableModel con la lista del controlador
        this.tablaUsuarioModelo.setUsuarios(this.controlador.buscarTodosLosUsuarios());

        //Refrescar el modelo en la tabla
        this.tablaUsuarioModelo.fireTableDataChanged();

        limpiarTodosLosCampos();
        habilitarTodosLosCampos(false);
        habilitarTodosLosBotones(false);

        this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarCampo(true, this.jtf_buscarUsuario);

        this.usuarioSeleccionado = null;

        this.jTabbedPaneContenedor.setSelectedIndex(0);
        this.jbtn_volverADatosDeUsuarioPersona.setEnabled(false);
        this.jbtn_volverADatosDeUsuarioPersona.setEnabled(false);

        this.jtb_usuario.setEnabled(true);

        this.crud = "buscar";

    }//GEN-LAST:event_jbtn_listarActionPerformed

    /**
     * Controla el boton agregar
     *
     * @param evt
     */
    private void jbtn_agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_agregarActionPerformed
        this.usuarioSeleccionado = new Usuario();
        Persona nuevaPersonAsociada = new Persona();
        Operador nuevoOperadorAsociado = new Operador();
        usuarioSeleccionado.setUnaPersona(nuevaPersonAsociada);
        usuarioSeleccionado.setUnOperador(nuevoOperadorAsociado);

        this.crud = "agregar";
        habilitarTodosLosBotones(false);
        habilitarTodosLosCampos(true);
        jtf_nickname.setEnabled(true);
        jtf_nickname.requestFocus();

        jbtn_listarPersona.setEnabled(true);
        jtf_buscarPersona.setEnabled(true);

        jtf_buscarEmpleado.setEnabled(true);

        this.validador.limpiarCampo(this.jtf_nickname);
        this.validador.limpiarCampo(this.jtf_empleadoAsociado);
        this.validador.limpiarCampo(this.jtf_personaAsociada);
        this.validador.limpiarCampo(this.jtf_buscarUsuario);
        this.jpf_password.setText("");
        this.jpf_confirmarPassword.setText("");

        this.jtf_empleadoAsociado.setEnabled(false);
        this.jtf_personaAsociada.setEnabled(false);
        this.validador.habilitarBoton(false, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_aceptar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_cancelar, Color.red, Color.WHITE, null, null);
        this.validador.habilitarBoton(false, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarCampo(false, this.jtf_buscarUsuario);

        this.validador.habilitarBoton(true, this.jbtn_listarEmpleado, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_listarPersona, new Color(30, 132, 73), Color.WHITE, null, null);

        this.jtb_usuario.setEnabled(false);

        this.jTabbedPaneContenedor.setSelectedIndex(0);
        this.jbtn_volverADatosDeUsuarioPersona.setEnabled(false);
        this.jbtn_volverADatosDeUsuarioPersona.setEnabled(false);


    }//GEN-LAST:event_jbtn_agregarActionPerformed

    /**
     * Controla el Foco del JTextFiel buscar persona
     *
     * @param evt
     */
    private void jtf_buscarUsuarioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtf_buscarUsuarioFocusGained
        if (this.jtf_buscarUsuario.isEditable()) {
            this.tablaUsuarioModelo.setUsuarios(this.controlador.buscarTodosLosUsuarios());

            //Refrescar el modelo en la tabla
            this.tablaUsuarioModelo.fireTableDataChanged();

            limpiarTodosLosCampos();
            habilitarTodosLosCampos(false);
            habilitarTodosLosBotones(false);

            this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
            this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
            this.validador.habilitarCampo(true, this.jtf_buscarUsuario);

            this.usuarioSeleccionado = null;

            this.jtb_usuario.setEnabled(true);

            this.jlbl_alertaNickName.setIcon(null);
            this.jlbl_alertaPassword.setIcon(null);
            this.jlbl_alertaConfirmarPassword.setIcon(null);
            this.jlbl_alertaPersonaAsociada.setIcon(null);
            this.jlbl_alertaEmpleadoAsociado.setIcon(null);
            this.jTabbedPaneContenedor.setSelectedIndex(0);

        }
    }//GEN-LAST:event_jtf_buscarUsuarioFocusGained

    /**
     * @param evt
     */
    private void jtf_buscarUsuarioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_buscarUsuarioKeyReleased
        if (this.jtf_buscarUsuario.isEditable()) {
            //Actualizar el TableModel con la lista del controlador
            this.tablaUsuarioModelo.setUsuarios(this.controlador.buscarUsuariosPorNickName(this.jtf_buscarUsuario.getText()));

            //Refrescar el modelo en la tabla
            this.tablaUsuarioModelo.fireTableDataChanged();
        }
    }//GEN-LAST:event_jtf_buscarUsuarioKeyReleased

    /**
     * Controla el boton eliminar
     *
     * @param evt
     */
    private void jbtn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_eliminarActionPerformed
        this.crud = "eliminar";
        habilitarTodosLosBotones(false);
        habilitarTodosLosCampos(false);
        this.validador.habilitarBoton(false, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_aceptar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_cancelar, Color.red, Color.WHITE, null, null);
        this.validador.habilitarBoton(false, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarCampo(false, this.jtf_buscarUsuario);

        this.jtb_usuario.setEnabled(false);
    }//GEN-LAST:event_jbtn_eliminarActionPerformed

    private void jtf_personaAsociadaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtf_personaAsociadaMousePressed
        if (this.usuarioSeleccionado != null) {
            if (this.usuarioSeleccionado.getUnaPersona() != null) {
                this.jTabbedPaneContenedor.setSelectedIndex(1);
                this.validador.habilitarBoton(true, this.jbtn_volverADatosDeUsuarioPersona, new Color(255, 255, 0), Color.BLACK, null, null);

                //Actualizar el TableModel con la lista del controlador
                this.tablaPersonaModelo.setPersonas(null);

                //Refrescar el modelo en la tabla
                this.tablaPersonaModelo.fireTableDataChanged();

                if (this.crud.equals("agregar")) {
                    this.jtf_buscarPersona.setText("");
                    this.jtf_buscarPersona.setEnabled(false);
                    this.jtb_personaAsociada.setEnabled(true);
                    ///asdsdasdasd
                    if (this.usuarioSeleccionado.getUnaPersona().getId() != null) {
                        this.tablaPersonaModelo.setPersonas(this.controlador.buscarTodasLasPersonas());
                        //Refrescar el modelo en la tabla
                        this.tablaPersonaModelo.fireTableDataChanged();
                        this.jtb_personaAsociada.changeSelection(this.tablaPersonaModelo.buscarFilaPersona(this.usuarioSeleccionado.getUnaPersona()) - 1, 1, false, false);

                        this.validador.habilitarBoton(true, this.jbtn_desasignarPersona, Color.RED, Color.WHITE, null, null);
                    } else {
                        this.jtf_buscarPersona.setText("");
                        this.jtf_buscarPersona.setEnabled(false);
                        this.jtb_personaAsociada.setEnabled(true);
                    }

                }
                if (this.crud.equals("buscar")) {
                    this.tablaPersonaModelo.setPersonas(this.controlador.buscarTodasLasPersonas());
                    this.jtb_personaAsociada.setEnabled(false);
                    //Refrescar el modelo en la tabla
                    this.tablaPersonaModelo.fireTableDataChanged();
                    this.jtb_personaAsociada.changeSelection(this.tablaPersonaModelo.buscarFilaPersona(this.usuarioSeleccionado.getUnaPersona()) - 1, 1, false, false);
                    this.validador.habilitarBoton(false, this.jbtn_asignarEmpleado, new Color(30, 132, 73), Color.WHITE, null, null);
                    this.validador.habilitarBoton(false, this.jbtn_desasignarEmpleado, new Color(30, 132, 73), Color.WHITE, null, null);
                }
            }
        }


    }//GEN-LAST:event_jtf_personaAsociadaMousePressed

    private void jtf_empleadoAsociadoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtf_empleadoAsociadoMousePressed
        if (this.usuarioSeleccionado != null) {
            if (this.usuarioSeleccionado.getUnOperador() != null) {
                this.jTabbedPaneContenedor.setSelectedIndex(2);
                this.validador.habilitarBoton(true, this.jbtn_volverADatosDeUsuarioEmpleado, new Color(255, 255, 0), Color.BLACK, null, null);

                //Actualizar el TableModel con la lista del controlador
                this.tablaOperadorModelo.setOperadores(null);

                //Refrescar el modelo en la tabla
                this.tablaOperadorModelo.fireTableDataChanged();

                if (this.crud.equals("agregar")) {
                    if (this.usuarioSeleccionado.getUnOperador().getId() != null) {
                        this.tablaOperadorModelo.setOperadores(this.controlador.buscarTodosLosOperadores());
                        //Refrescar el modelo en la tabla
                        this.tablaOperadorModelo.fireTableDataChanged();
                        this.jtb_empleadoAsociado.changeSelection(this.tablaOperadorModelo.buscarFilaOperador(this.usuarioSeleccionado.getUnOperador()) - 1, 1, false, false);

                        this.validador.habilitarBoton(true, this.jbtn_desasignarEmpleado, Color.RED, Color.WHITE, null, null);
                    } else {
                        this.jtf_buscarEmpleado.setText("");
                        this.jtf_buscarEmpleado.setEnabled(false);
                        this.jtb_empleadoAsociado.setEnabled(true);
                    }

                }
                if (this.crud.equals("buscar")) {
                    this.tablaOperadorModelo.setOperadores(this.controlador.buscarTodosLosOperadores());
                    this.jtb_empleadoAsociado.setEnabled(false);
                    //Refrescar el modelo en la tabla
                    this.tablaOperadorModelo.fireTableDataChanged();
                    this.jtb_empleadoAsociado.changeSelection(this.tablaOperadorModelo.buscarFilaOperador(this.usuarioSeleccionado.getUnOperador()) - 1, 1, false, false);
                    this.validador.habilitarBoton(false, this.jbtn_asignarEmpleado, new Color(30, 132, 73), Color.WHITE, null, null);
                    this.validador.habilitarBoton(false, this.jbtn_desasignarEmpleado, new Color(30, 132, 73), Color.WHITE, null, null);
                }
            }
        }
    }//GEN-LAST:event_jtf_empleadoAsociadoMousePressed

    private void jbtn_volverADatosDeUsuarioPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_volverADatosDeUsuarioPersonaActionPerformed
        this.jTabbedPaneContenedor.setSelectedIndex(0);
        this.validador.habilitarBoton(false, this.jbtn_volverADatosDeUsuarioPersona, new Color(30, 132, 73), Color.WHITE, null, null);

    }//GEN-LAST:event_jbtn_volverADatosDeUsuarioPersonaActionPerformed

    private void jbtn_volverADatosDeUsuarioEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_volverADatosDeUsuarioEmpleadoActionPerformed

        if (this.crud.equals("agregar")) {
            this.jTabbedPaneContenedor.setSelectedIndex(0);
            this.validador.habilitarBoton(false, this.jbtn_volverADatosDeUsuarioEmpleado, new Color(30, 132, 73), Color.WHITE, null, null);
        }

        if (this.crud.equals("buscar")) {
            this.jTabbedPaneContenedor.setSelectedIndex(0);
        }

    }//GEN-LAST:event_jbtn_volverADatosDeUsuarioEmpleadoActionPerformed

    private void jbtn_listarPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_listarPersonaActionPerformed
        //Actualizar el TableModel con la lista del controlador
        this.tablaPersonaModelo.setPersonas(this.controlador.buscarTodasLasPersonas());

        //Refrescar el modelo en la tabla
        this.tablaPersonaModelo.fireTableDataChanged();

        this.validador.habilitarCampo(true, this.jtf_buscarPersona);

        if (this.crud.equals("agregar")) {
            this.jtf_buscarPersona.setText("");
            this.jtf_buscarPersona.setEnabled(true);
        }
    }//GEN-LAST:event_jbtn_listarPersonaActionPerformed

    private void jbtn_listarEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_listarEmpleadoActionPerformed
        //Actualizar el TableModel con la lista del controlador
        this.tablaOperadorModelo.setOperadores(this.controlador.buscarTodosLosOperadores());

        //Refrescar el modelo en la tabla
        this.tablaOperadorModelo.fireTableDataChanged();

        this.validador.habilitarCampo(true, this.jtf_buscarEmpleado);

        if (this.crud.equals("agregar")) {
            this.jtf_buscarEmpleado.setText("");
            this.jtf_buscarEmpleado.setEnabled(true);
        }
    }//GEN-LAST:event_jbtn_listarEmpleadoActionPerformed

    private void jtf_buscarEmpleadoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_buscarEmpleadoKeyReleased
        if (this.jtf_buscarEmpleado.isEditable()) {
            //Actualizar el TableModel con la lista del controlador
            this.tablaOperadorModelo.setOperadores(this.controlador.buscarOperadorDeUsuarioPorDNI(this.jtf_buscarEmpleado.getText()));

            //Refrescar el modelo en la tabla
            this.tablaOperadorModelo.fireTableDataChanged();
        }
    }//GEN-LAST:event_jtf_buscarEmpleadoKeyReleased

    private void jtf_buscarEmpleadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtf_buscarEmpleadoFocusGained
        if (this.jtf_buscarEmpleado.isEditable()) {
            this.tablaOperadorModelo.setOperadores(this.controlador.buscarTodosLosOperadores());
            this.jtf_buscarEmpleado.setText("");
            //Refrescar el modelo en la tabla
            this.tablaOperadorModelo.fireTableDataChanged();

        }
    }//GEN-LAST:event_jtf_buscarEmpleadoFocusGained

    private void jbtn_asignarEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_asignarEmpleadoActionPerformed

        if (this.crud.equals("agregar")) {
            int opcion = 0;
            opcion = JOptionPane.showConfirmDialog(this, "Realmente Asociar al Empleado", "Confirmar Asociación", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (opcion == 0) {
                this.jTabbedPaneContenedor.setSelectedIndex(0);
                this.validador.habilitarBoton(false, this.jbtn_volverADatosDeUsuarioEmpleado, new Color(30, 132, 73), Color.WHITE, null, null);

                int filaSeleccionada = this.jtb_empleadoAsociado.getSelectedRow();
                this.usuarioSeleccionado.setUnOperador(this.tablaOperadorModelo.obtenerOperadorEn(filaSeleccionada));
                this.jtf_empleadoAsociado.setText(this.usuarioSeleccionado.getUnOperador().getDni());

            } else {
                //Actualizar el TableModel con la lista del controlador
                this.tablaOperadorModelo.setOperadores(this.controlador.buscarTodosLosOperadores());
                //Refrescar el modelo en la tabla
                this.tablaOperadorModelo.fireTableDataChanged();
                this.validador.habilitarCampo(true, this.jtf_buscarEmpleado);
                this.jtf_buscarEmpleado.setText("");
                this.jtf_buscarEmpleado.setEnabled(true);
            }
        }

    }//GEN-LAST:event_jbtn_asignarEmpleadoActionPerformed

    private void jbtn_desasignarEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_desasignarEmpleadoActionPerformed
        if (this.crud.equals("agregar")) {
            int opcion = 0;
            opcion = JOptionPane.showConfirmDialog(this, "Realmente Desasociar al Empleado", "Confirmar Desasociación", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (opcion == 0) {
                this.jTabbedPaneContenedor.setSelectedIndex(0);
                this.validador.habilitarBoton(false, this.jbtn_volverADatosDeUsuarioEmpleado, new Color(30, 132, 73), Color.WHITE, null, null);
                this.usuarioSeleccionado.setUnOperador(new Operador());
                this.jtf_empleadoAsociado.setText("");

            }
        }
    }//GEN-LAST:event_jbtn_desasignarEmpleadoActionPerformed

    private void jtf_buscarPersonaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_buscarPersonaKeyReleased
        if (this.jtf_buscarPersona.isEditable()) {
            //Actualizar el TableModel con la lista del controlador
            this.tablaPersonaModelo.setPersonas(this.controlador.buscarPersonaDeUsuarioPorDNI(this.jtf_buscarPersona.getText()));

            //Refrescar el modelo en la tabla
            this.tablaPersonaModelo.fireTableDataChanged();
        }
    }//GEN-LAST:event_jtf_buscarPersonaKeyReleased

    private void jtf_buscarPersonaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtf_buscarPersonaFocusGained
        if (this.jtf_buscarPersona.isEditable()) {
            this.tablaPersonaModelo.setPersonas(this.controlador.buscarTodasLasPersonas());
            this.jtf_buscarPersona.setText("");
            //Refrescar el modelo en la tabla
            this.tablaPersonaModelo.fireTableDataChanged();

        }
    }//GEN-LAST:event_jtf_buscarPersonaFocusGained

    private void jbtn_asignarPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_asignarPersonaActionPerformed
        if (this.crud.equals("agregar")) {
            int opcion = 0;
            opcion = JOptionPane.showConfirmDialog(this, "Realmente Asociar a la Persona", "Confirmar Asociación", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (opcion == 0) {
                this.jTabbedPaneContenedor.setSelectedIndex(0);
                this.validador.habilitarBoton(false, this.jbtn_volverADatosDeUsuarioPersona, new Color(30, 132, 73), Color.WHITE, null, null);

                int filaSeleccionada = this.jtb_personaAsociada.getSelectedRow();
                this.usuarioSeleccionado.setUnaPersona(this.tablaPersonaModelo.obtenerPersonaEn(filaSeleccionada));
                this.jtf_personaAsociada.setText(this.usuarioSeleccionado.getUnaPersona().getDni());

            } else {
                //Actualizar el TableModel con la lista del controlador
                this.tablaPersonaModelo.setPersonas(this.controlador.buscarTodasLasPersonas());
                //Refrescar el modelo en la tabla
                this.tablaPersonaModelo.fireTableDataChanged();
                this.validador.habilitarCampo(true, this.jtf_buscarPersona);
                this.jtf_buscarPersona.setText("");
                this.jtf_buscarPersona.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jbtn_asignarPersonaActionPerformed

    private void jbtn_desasignarPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_desasignarPersonaActionPerformed
        if (this.crud.equals("agregar")) {
            int opcion = 0;
            opcion = JOptionPane.showConfirmDialog(this, "Realmente Desasociar a la Persona", "Confirmar Desasociación", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (opcion == 0) {
                this.jTabbedPaneContenedor.setSelectedIndex(0);
                this.validador.habilitarBoton(false, this.jbtn_volverADatosDeUsuarioEmpleado, new Color(30, 132, 73), Color.WHITE, null, null);
                this.usuarioSeleccionado.setUnaPersona(new Persona());
                this.jtf_personaAsociada.setText("");

            }
        }
    }//GEN-LAST:event_jbtn_desasignarPersonaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanelEmpleadoAsociado;
    private javax.swing.JPanel jPanelPersonaAsociada;
    private javax.swing.JPanel jPanel_crud;
    private javax.swing.JPanel jPanel_datos;
    private javax.swing.JScrollPane jScrollPaneEmpleadoAsociado;
    private javax.swing.JScrollPane jScrollPanePersonaAsociada;
    private javax.swing.JScrollPane jScrollPaneTabla;
    private javax.swing.JTabbedPane jTabbedPaneContenedor;
    private javax.swing.JButton jbtn_aceptar;
    private javax.swing.JButton jbtn_agregar;
    private javax.swing.JButton jbtn_asignarEmpleado;
    private javax.swing.JButton jbtn_asignarPersona;
    private javax.swing.JButton jbtn_cancelar;
    private javax.swing.JButton jbtn_desasignarEmpleado;
    private javax.swing.JButton jbtn_desasignarPersona;
    private javax.swing.JButton jbtn_eliminar;
    private javax.swing.JButton jbtn_listar;
    private javax.swing.JButton jbtn_listarEmpleado;
    private javax.swing.JButton jbtn_listarPersona;
    private javax.swing.JButton jbtn_modificar;
    private javax.swing.JButton jbtn_volver;
    private javax.swing.JButton jbtn_volverADatosDeUsuarioEmpleado;
    private javax.swing.JButton jbtn_volverADatosDeUsuarioPersona;
    private javax.swing.JLabel jlbl_alertaConfirmarPassword;
    private javax.swing.JLabel jlbl_alertaEmpleadoAsociado;
    private javax.swing.JLabel jlbl_alertaNickName;
    private javax.swing.JLabel jlbl_alertaPassword;
    private javax.swing.JLabel jlbl_alertaPersonaAsociada;
    private javax.swing.JLabel jlbl_mensaje;
    private javax.swing.JPasswordField jpf_confirmarPassword;
    private javax.swing.JPasswordField jpf_password;
    private javax.swing.JTable jtb_empleadoAsociado;
    private javax.swing.JTable jtb_personaAsociada;
    private javax.swing.JTable jtb_usuario;
    private javax.swing.JTextField jtf_buscarEmpleado;
    private javax.swing.JTextField jtf_buscarPersona;
    private javax.swing.JTextField jtf_buscarUsuario;
    private javax.swing.JTextField jtf_empleadoAsociado;
    private javax.swing.JTextField jtf_nickname;
    private javax.swing.JTextField jtf_personaAsociada;
    // End of variables declaration//GEN-END:variables

    //--------------------------------------------------------------------------
    //--------------------------Metodos Implementados---------------------------
    //--------------------------------------------------------------------------
    @Override
    public void habilitarTodosLosCampos(boolean estado) {

        this.validador.habilitarCampo(estado, this.jtf_nickname);
        this.validador.habilitarCampo(estado, this.jtf_empleadoAsociado);
        this.validador.habilitarCampo(estado, this.jtf_personaAsociada);
        this.validador.habilitarCampo(estado, this.jtf_buscarUsuario);
        this.jpf_password.setEnabled(estado);
        this.jpf_confirmarPassword.setEnabled(estado);

        this.validador.habilitarCampo(estado, this.jtf_buscarEmpleado);
        this.validador.habilitarCampo(estado, this.jtf_buscarPersona);

    }

    @Override
    public void limpiarTodosLosCampos() {
        this.validador.limpiarCampo(this.jtf_nickname);
        this.validador.limpiarCampo(this.jtf_empleadoAsociado);
        this.validador.limpiarCampo(this.jtf_personaAsociada);
        this.validador.limpiarCampo(this.jtf_buscarUsuario);
        this.jpf_password.setText("");
        this.jpf_confirmarPassword.setText("");

        this.validador.limpiarCampo(this.jtf_buscarEmpleado);
        this.validador.limpiarCampo(this.jtf_buscarPersona);
    }

    @Override
    public void habilitarTodosLosBotones(boolean estado) {
        this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(estado, this.jbtn_aceptar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(estado, this.jbtn_cancelar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(estado, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(estado, this.jbtn_eliminar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(estado, this.jbtn_modificar, new Color(30, 132, 73), Color.WHITE, null, null);

        this.validador.habilitarBoton(estado, this.jbtn_volverADatosDeUsuarioPersona, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(estado, this.jbtn_volverADatosDeUsuarioEmpleado, new Color(30, 132, 73), Color.WHITE, null, null);

        this.validador.habilitarBoton(estado, this.jbtn_listarEmpleado, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(estado, this.jbtn_listarPersona, new Color(30, 132, 73), Color.WHITE, null, null);

    }

    //--------------------------------------------------------------------------
    //--------------------------Metodos Getters y Settes------------------------
    //--------------------------------------------------------------------------
    public javax.swing.JButton getJbtn_aceptar() {
        return this.jbtn_aceptar;
    }

    public javax.swing.JButton getJbtn_agregar() {
        return this.jbtn_agregar;
    }

    public javax.swing.JButton getJbtn_cancelar() {
        return this.jbtn_cancelar;
    }

    public javax.swing.JButton getJbtn_eliminar() {
        return this.jbtn_eliminar;
    }

    public javax.swing.JButton getJbtn_modificar() {
        return this.jbtn_modificar;
    }

    public ValidadorDeCampos getValidador() {
        return this.validador;
    }

    public javax.swing.JTextField getJtf_buscarPersona() {
        return this.jtf_buscarUsuario;
    }

    public Usuario getUsuarioSeleccionado() {
        return this.usuarioSeleccionado;
    }

    public void setUsuarioSeleccionado(Usuario usuarioSeleccionado) {
        this.usuarioSeleccionado = usuarioSeleccionado;
    }

    private javax.swing.JPasswordField getJpf_confirmarPassword() {
        return jpf_confirmarPassword;
    }

    //--------------------------------------------------------------------------
    //--------------------------Metodos Adicionales-----------------------------
    //--------------------------------------------------------------------------
    /**
     * Selecciona una fila de la tabla, devolviendo un objeto Persona
     */
    public void seleccionarUsuario() {
        limpiarTodosLosCampos();
        //obtiene el indice de la fila seleccionada en la tabla de usuarios
        int filaSeleccionada = this.jtb_usuario.getSelectedRow();
        // si la fila esta seleccionada, seteamos la persona auxiliar, llamando al modelo de tabla
        if (filaSeleccionada >= 0) {

            this.jTabbedPaneContenedor.setSelectedIndex(0);
            this.usuarioSeleccionado = this.tablaUsuarioModelo.obtenerUsuarioEn(filaSeleccionada);
            this.jtf_nickname.setText(this.usuarioSeleccionado.getNombre());

            if (usuarioSeleccionado.getUnaPersona() != null) {
                this.jtf_personaAsociada.setText(this.usuarioSeleccionado.getUnaPersona().getDni());
            }
            if (usuarioSeleccionado.getUnOperador()!= null) {
                this.jtf_empleadoAsociado.setText(this.usuarioSeleccionado.getUnOperador().getDni());
            }

            if (usuarioSeleccionado.getClave() != null) {
                this.jpf_password.setText(this.usuarioSeleccionado.getClave());
                this.jpf_confirmarPassword.setText(this.usuarioSeleccionado.getClave());
            }

        } else {
            this.validador.habilitarBoton(false, this.jbtn_aceptar, new Color(30, 132, 73), Color.WHITE, null, null);
            this.validador.habilitarBoton(true, this.jbtn_eliminar, new Color(30, 132, 73), Color.WHITE, null, null);
            this.validador.habilitarBoton(true, this.jbtn_modificar, new Color(30, 132, 73), Color.WHITE, null, null);
        }
    }

    /**
     * Selecciona una fila de la tabla, devolviendo un objeto Operador
     */
    public void seleccionarEmpleado() {
        //obtiene el indice de la fila seleccionada en la tabla de empleados
        int filaSeleccionada = this.jtb_empleadoAsociado.getSelectedRow();
        // si la fila esta seleccionada, seteamos la persona auxiliar, llamando al modelo de tabla        
        if (filaSeleccionada >= 0) {
            if (this.crud.equals("agregar")) {
                this.validador.habilitarBoton(true, this.jbtn_asignarEmpleado, new Color(30, 132, 73), Color.WHITE, null, null);
            }
        } else {
            this.validador.habilitarBoton(false, this.jbtn_asignarEmpleado, new Color(30, 132, 73), Color.WHITE, null, null);
            this.validador.habilitarBoton(false, this.jbtn_desasignarEmpleado, new Color(30, 132, 73), Color.WHITE, null, null);
        }
    }

    /**
     * Selecciona una fila de la tabla, devolviendo un objeto Persona
     */
    public void seleccionarPersona() {
        //obtiene el indice de la fila seleccionada en la tabla de empleados
        int filaSeleccionada = this.jtb_personaAsociada.getSelectedRow();
        // si la fila esta seleccionada, seteamos la persona auxiliar, llamando al modelo de tabla        
        if (filaSeleccionada >= 0) {
            if (this.crud.equals("agregar")) {
                this.validador.habilitarBoton(true, this.jbtn_asignarPersona, new Color(30, 132, 73), Color.WHITE, null, null);
            }
        } else {
            this.validador.habilitarBoton(false, this.jbtn_asignarPersona, new Color(30, 132, 73), Color.WHITE, null, null);
            this.validador.habilitarBoton(false, this.jbtn_desasignarPersona, new Color(30, 132, 73), Color.WHITE, null, null);
        }
    }

    //--------------------------------------------------------------------------
    //--------------------------Metodos CRUD------------------------------------
    //--------------------------------------------------------------------------
    /**
     * Crea un persona auxiliar y se lo envia al controlador para que persista
     * si el dni ya existe solicita que se ingrese uno diferente
     */
    public void agregar() {
        String mensaje = "";
        Usuario nuevoUsuario = null;
        String password1 = String.valueOf(jpf_password.getPassword());
        String password2 = String.valueOf(jpf_confirmarPassword.getPassword());

        mensaje = "Completar:";
        if ((!this.jtf_nickname.getText().isEmpty()) && !password1.isEmpty() && !password2.isEmpty() && password1.equals(password2)) {

            nuevoUsuario = new Usuario();
            nuevoUsuario.setNombre(this.jtf_nickname.getText());
            nuevoUsuario.setClave(password1);
            this.jlbl_alertaNickName.setIcon(null);
            this.jlbl_alertaPassword.setIcon(null);
            this.jlbl_alertaConfirmarPassword.setIcon(null);
            this.jlbl_alertaPersonaAsociada.setIcon(null);
            this.jlbl_alertaEmpleadoAsociado.setIcon(null);
            this.jlbl_mensaje.setText("");

            this.usuarioSeleccionado.setNombre(nuevoUsuario.getNombre());
            this.usuarioSeleccionado.setClave(nuevoUsuario.getClave());

        } else {
            if (this.jtf_nickname.getText().isEmpty()) {
                this.jlbl_alertaNickName.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/delete.png")));
                mensaje = mensaje + " *Nombre ";
            } else {
                this.jlbl_alertaNickName.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/accept.png")));
            }
            if (password1.isEmpty()) {
                this.jlbl_alertaPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/delete.png")));
                mensaje = mensaje + " *password vacio ";
            } else {
                this.jlbl_alertaPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/accept.png")));
            }
            if (password2.isEmpty()) {
                this.jlbl_alertaConfirmarPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/delete.png")));
                mensaje = mensaje + " *Confirmación de password vacio ";
            } else {
                this.jlbl_alertaConfirmarPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/accept.png")));
            }
            if (password1.equals(password2) && !password1.isEmpty() && !password2.isEmpty()) {
                this.jlbl_alertaPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/accept.png")));
                this.jlbl_alertaConfirmarPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/accept.png")));
            } else {
                this.jlbl_alertaPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/delete.png")));
                this.jlbl_alertaConfirmarPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/delete.png")));
            }
            this.jlbl_mensaje.setText(mensaje);
        }
        if (nuevoUsuario != null) {
            if (this.controlador.agregarUsuario(this.usuarioSeleccionado)) {
                this.jlbl_mensaje.setText("");

                //limpiar campos
                //Actualizar el TableModel con la lista del controlador
                this.tablaUsuarioModelo.setUsuarios(this.controlador.buscarTodosLosUsuarios());

                //Refrescar el modelo en la tabla
                this.tablaUsuarioModelo.fireTableDataChanged();

                limpiarTodosLosCampos();
                habilitarTodosLosCampos(false);
                habilitarTodosLosBotones(false);

                this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarCampo(true, this.jtf_buscarUsuario);

                this.jtb_usuario.setEnabled(true);

                this.usuarioSeleccionado = null;

                this.jtb_usuario.getSelectionModel().setSelectionInterval(this.tablaUsuarioModelo.getRowCount() - 1, this.tablaUsuarioModelo.getRowCount() - 1);
                this.tablaUsuarioModelo.getValueAt(this.tablaUsuarioModelo.getRowCount() - 1, 0);

                seleccionarUsuario();

                int selectedRow = jtb_usuario.getSelectedRow();
                Rectangle rect = jtb_usuario.getCellRect(selectedRow, 0, true);
                jScrollPaneTabla.getViewport().scrollRectToVisible(rect);
                this.crud = "buscar";
            } else {
                this.jlbl_alertaNickName.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/delete.png")));
                mensaje = mensaje + " *El USUARIO ya existe, ingrese uno valido";
                this.jlbl_mensaje.setText(mensaje);
            }
        }

    }

    /**
     * Modifica una persona existente
     *
     * @throws java.lang.Exception
     */
    public void modificar() throws Exception {
        String mensaje = "";
        Usuario nuevoUsuario = null;
        mensaje = "Completar:";

        nuevoUsuario.setClave(new String(getJpf_confirmarPassword().getPassword()));

        String password1 = String.valueOf(jpf_password.getPassword());
        String password2 = String.valueOf(jpf_confirmarPassword.getPassword());

        if ((!this.jtf_nickname.getText().isEmpty()) && !password1.isEmpty() && !password2.isEmpty() && password1.equals(password2)) {

            nuevoUsuario = new Usuario();
            nuevoUsuario.setNombre(this.jtf_nickname.getText());
            nuevoUsuario.setClave(password1);

            this.jlbl_alertaNickName.setIcon(null);
            this.jlbl_alertaPassword.setIcon(null);
            this.jlbl_alertaConfirmarPassword.setIcon(null);
            this.jlbl_alertaPersonaAsociada.setIcon(null);
            this.jlbl_alertaEmpleadoAsociado.setIcon(null);
            this.jlbl_mensaje.setText("");

        } else {
            if (this.jtf_nickname.getText().isEmpty()) {
                this.jlbl_alertaNickName.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/delete.png")));
                mensaje = mensaje + " *Nombre ";
            } else {
                this.jlbl_alertaNickName.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/accept.png")));
            }
            if (password1.isEmpty()) {
                this.jlbl_alertaPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/delete.png")));
                mensaje = mensaje + " *password vacio ";
            } else {
                this.jlbl_alertaPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/accept.png")));
            }
            if (password2.isEmpty()) {
                this.jlbl_alertaConfirmarPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/delete.png")));
                mensaje = mensaje + " *Confirmación de password vacio ";
            } else {
                this.jlbl_alertaConfirmarPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/accept.png")));
            }
            this.jlbl_mensaje.setText(mensaje);

        }
        if (nuevoUsuario != null) {
            if (this.controlador.modificarUsuario(usuarioSeleccionado, nuevoUsuario)) {

                this.jlbl_mensaje.setText("");

                //limpiar campos
                //Actualizar el TableModel con la lista del controlador
                this.tablaUsuarioModelo.setUsuarios(this.controlador.buscarTodosLosUsuarios());

                //Refrescar el modelo en la tabla
                this.tablaUsuarioModelo.fireTableDataChanged();

                limpiarTodosLosCampos();
                habilitarTodosLosCampos(false);
                habilitarTodosLosBotones(false);

                this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
                this.validador.habilitarCampo(true, this.jtf_buscarUsuario);

                this.jtb_usuario.setEnabled(true);

                this.jtb_usuario.getSelectionModel().setSelectionInterval(this.tablaUsuarioModelo.buscarFilaUsuario(usuarioSeleccionado) - 1, this.tablaUsuarioModelo.buscarFilaUsuario(usuarioSeleccionado) - 1);

                seleccionarUsuario();

                int selectedRow = jtb_usuario.getSelectedRow();
                Rectangle rect = jtb_usuario.getCellRect(selectedRow, 0, true);
                jScrollPaneTabla.getViewport().scrollRectToVisible(rect);
                this.crud = "buscar";
            } else {
                this.jlbl_alertaPersonaAsociada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/png/16x16/delete.png")));
                mensaje = mensaje + " *El DNI ya existe, ingrese otro";
                this.jlbl_mensaje.setText(mensaje);
            }

        }
    }

    /**
     * Elimina una persona existente
     *
     * @throws java.sql.SQLIntegrityConstraintViolationException
     */
    public void eliminar() throws SQLIntegrityConstraintViolationException, SQLException, NonexistentEntityException {

        controlador.eliminarUsuario(usuarioSeleccionado);
        //Actualizar el TableModel con la lista del controlador
        this.tablaUsuarioModelo.setUsuarios(this.controlador.buscarTodosLosUsuarios());

        //Refrescar el modelo en la tabla
        this.tablaUsuarioModelo.fireTableDataChanged();

        limpiarTodosLosCampos();
        habilitarTodosLosCampos(false);
        habilitarTodosLosBotones(false);

        this.validador.habilitarBoton(true, this.jbtn_agregar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarBoton(true, this.jbtn_listar, new Color(30, 132, 73), Color.WHITE, null, null);
        this.validador.habilitarCampo(true, this.jtf_buscarUsuario);

        this.usuarioSeleccionado = null;

        this.jtb_usuario.setEnabled(true);

        this.jlbl_alertaNickName.setIcon(null);
        this.jlbl_alertaPassword.setIcon(null);
        this.jlbl_alertaConfirmarPassword.setIcon(null);
        this.jlbl_alertaPersonaAsociada.setIcon(null);
        this.jlbl_alertaEmpleadoAsociado.setIcon(null);

        this.jlbl_mensaje.setText("");

    }

}
